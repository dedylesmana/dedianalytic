data("iris")
View(iris)
mar = subset(freetrade, select = -c(Country))
mar = subset(freetrade, select = -c(country))
summary(mar)
#imputasi dengan MICE
library(mice)
md.pattern(mar)
md.pairs(mar)
plotting = aggr(mar, col=c('blue','red'), numbers=TRUE, sortVars=TRUE,
labels=names(iris.mis), cex.axis=.7, gap=3, ylab=c("Missing data",
"Pattern"))
library(VIM)
plotting = aggr(mar, col=c('blue','red'), numbers=TRUE, sortVars=TRUE,
labels=names(iris.mis), cex.axis=.7, gap=3, ylab=c("Missing data",
"Pattern"))
plotting = aggr(mar, col=c('blue','red'), numbers=TRUE, sortVars=TRUE,
labels=names(mar), cex.axis=.7, gap=3, ylab=c("Missing data",
"Pattern"))
vis_miss(freetrade, sort_miss = TRUE)
?aggr
plotting = aggr(mar, col=c('skyblue','red', 'orange'), numbers=TRUE, sortVars
=TRUE, labels=names(mar), cex.axis=.7, gap=3, ylab=c("Missing data",
"Pattern"))
?aggr
plotting = aggr(mar, col=c('skyblue','red', 'orange'), numbers=TRUE, sortVars
= TRUE, labels=names(mar), cex.lab = 1.2, cex.axis=.7, gap=4, ylab=c("Missing data",
"Pattern"))
?aggr
plotting = aggr(mar, col=c('skyblue','red', 'orange'), numbers=TRUE, sortVars
= TRUE, labels=names(mar), cex.lab = 1.2, cex.axis=.7, cex.numbers = .1
gap=4, ylab=c("Missing data","Pattern"))
plotting = aggr(mar, col=c('skyblue','red', 'orange'), numbers=TRUE, sortVars
= TRUE, labels=names(mar), cex.lab = 1.2, cex.axis=.1, gap=4,
ylab=c("Missing data","Pattern"))
plotting = aggr(mar, col=c('skyblue','red', 'orange'), numbers=TRUE, sortVars
= TRUE, labels=names(mar), cex.lab = 1.2, cex.axis=.7, gap=4,
ylab=c("Missing data","Pattern"))
plotting = aggr(mar, col=c('skyblue','red', 'orange'), numbers=TRUE, sortVars
= TRUE, labels=names(mar), cex.lab = 1.2, cex.axis=.7, gap=4,
ylab=c("Missing data","Pattern", title "Misplot MAR"))
plotting = aggr(mar, col=c('skyblue','red', 'orange'), numbers=TRUE, sortVars
= TRUE, labels=names(mar), cex.lab = 1.2, cex.axis=.7, gap=4,
ylab=c("Missing data","Pattern"), title = "Misplot MAR"))
plotting = aggr(mar, col=c('skyblue','red', 'orange'), numbers=TRUE, sortVars
= TRUE, labels=names(mar), cex.lab = 1.2, cex.axis=.7, gap=4,
ylab=c("Missing data","Pattern", title = "Misplot MAR"))
plotting = aggr(mar, col=c('skyblue','red', 'orange'), numbers=TRUE, sortVars
= TRUE, labels=names(mar), cex.lab = 1.2, cex.axis=.7, gap=4,
ylab=c("Missing data","Pattern"))
?aggr
plotting = aggr(mar, col=c('skyblue','red', 'orange'), numbers=TRUE, sortVars
= TRUE, labels=names(mar), cex.lab = 1.2, cex.axis=.7, gap=4,
ylab=c("Missing data","Pattern"))
plotting = aggr(mar, col=c('skyblue','red', 'orange'), numbers=TRUE, sortVars
= TRUE, labels=names(mar), cex.lab = 1.2, cex.axis=.7, gap=3,
ylab=c("Missing data","Pattern"))
plotting = aggr(mar, col=c('skyblue','red', 'orange'), numbers=TRUE, sortVars
= TRUE, labels=names(mar), cex.lab = 1.2, cex.axis=.7, gap=2,
ylab=c("Missing data","Pattern"))
vis_miss(freetrade, sort_miss = TRUE)
plotting = aggr(mar, col=c('skyblue','red', 'orange'), numbers=TRUE, sortVars
= TRUE, labels=names(mar), cex.lab = 1.2, cex.axis=.7, gap=2,
ylab=c("Missing data","Pattern"))
plotting = aggr(mar, col=c('skyblue','red', 'orange'), numbers=TRUE, sortVars
= TRUE, labels=names(mar), cex.lab = 1.2, cex.axis=.7, gap=1,
ylab=c("Missing data","Pattern"))
plotting = aggr(mar, col=c('skyblue','red', 'orange'), numbers=TRUE, sortVars
= TRUE, labels=names(mar), cex.lab = 1.2, cex.axis=.7, gap=10,
ylab=c("Missing data","Pattern"))
plotting = aggr(mar, col=c('skyblue','red', 'orange'), numbers=TRUE, sortVars
= TRUE, labels=names(mar), cex.lab = 1.2, cex.axis=.7, gap=1.2,
ylab=c("Missing data","Pattern"))
plotting = aggr(mar, col=c('skyblue','red', 'orange'), numbers=TRUE, sortVars
= FALSE, labels=names(mar), cex.lab = 1.2, cex.axis=.7, gap=1,
ylab=c("Missing data","Pattern"))
plotting = aggr(mar, col=c('skyblue','red', 'orange'), numbers=TRUE, sortVars
= TRUE, labels=names(mar), cex.lab = 1.2, cex.axis=.7, gap=1,
ylab=c("Missing data","Pola Data"))
plotting = aggr(mar, col=c('skyblue','red', 'orange'), numbers=TRUE, sortVars
= TRUE, labels=names(mar), cex.lab = 1.2, cex.axis=.7, gap=1,
ylab=c("Data Hilang","Pola Data"))
plotting = aggr(mar, col=c('skyblue','red', 'orange'), numbers=TRUE, sortVars
= TRUE, labels=names(mar), cex.lab = 1.5, cex.axis=.5, gap=1,
ylab=c("Data Hilang","Pola Data"))
plotting = aggr(mar, col=c('skyblue','red', 'orange'), numbers=TRUE, sortVars
= TRUE, labels=names(mar), cex.lab = 1.2, cex.axis=.6, gap=1,
ylab=c("Data Hilang","Pola Data"))
imputed_Data = mice(mar, m=5, maxit = 50, method = 'pmm', seed = 500)
imputed_Data = mice(mar, m=3, maxit = 40, method = 'pmm', seed = 500)
imputed_Data = mice(mar, m=3, maxit = 40, method = 'pmm', seed = 123)
imputed_Data = mice(mar, m=3, maxit = 40, method = 'car', seed = 123)
imputed_Data = mice(mar, m=3, maxit = 40, method = 'cart', seed = 123)
summary(imputed_Data)
imputed_Data = mice(data = mar, m=3, maxit = 40, method = 'cart', seed = 123)
imputed_Data = mice(data = mar, m=3, maxit = 40, method = 'pmm', seed = 123)
imputed_Data = mice(data = mar, m=3, maxit = 50, method = 'cart', seed = 500)
summary(imputed_Data)
mice(data=mar, m=5, method = 'pmm', maxit = 50, seed = 500)
mice(data=mar, m=5, method = 'car', maxit = 50, seed = 500)
mice(data=mar, m=5, method = 'cart', maxit = 50, seed = 500)
?seed
??seed
imputed_Data$imp$tariff
imputed_Data$imp$polity
data.lengkap = complete(imputed_Data,2)
View(data.lengkap)
#Model prediksi
fit = with (data = mar, exp = lm(tariff ~ intresmi + signed))
#combine results of all 5 models
> combine <- pool(fit)
#Model prediksi
fit = with (data = mar, exp = lm(tariff ~ intresmi + signed))
combine = pool(fit)
#Model prediksi
fit = with (data = mar, lm(tariff ~ intresmi + signed))
combine = pool(fit)
help("Deprecated")
hms()
library(hms)
hms()
combine = pool(fit)
install.packages("pool")
combine = pool(fit)
library(pool)
combine = pool(fit)
#Model prediksi
fit = with (data = mar, exp = lm(tariff ~ intresmi + signed))
combine = pool(fit)
install.packages("D:/Dataset R Studio/pool_0.1.6.tar.gz", repos = NULL, type = "source")
install.packages("D:/Dataset R Studio/pool-main.zip", repos = NULL, type = "win.binary")
library(pool)
combine = pool(fit)
summary(combine)
("Pool",
public = list(
valid = NULL,
counters = NULL,
minSize = NULL,
maxSize = NULL,
idleTimeout = NULL,
validationInterval = NULL,
state = NULL,
## initialize the pool with min number of objects
initialize = function(factory, minSize, maxSize,
idleTimeout, validationInterval, state) {
self$valid <- TRUE
self$counters <- new.env(parent = emptyenv())
self$counters$free <- 0
self$counters$taken <- 0
private$idCounter <- 1
private$factory <- factory
self$minSize <- minSize
self$maxSize <- maxSize
self$idleTimeout <- idleTimeout
self$validationInterval <- validationInterval
self$state <- state
private$freeObjects <- new.env(parent = emptyenv())
for (i in seq_len(self$minSize)) {
private$createObject()
}
},
## calls activate and returns an object
fetch = function() {
if (!self$valid) {
stop("This pool is no longer valid. Cannot fetch new objects.")
}
## see if there's any free objects
freeEnv <- private$freeObjects
if (length(freeEnv) > 0) {
id <- ls(freeEnv)[[1]]  ## get first free object we find
object <- freeEnv[[id]]
## cancel reap task if it exists
private$cancelScheduledTask(object, "destroyHandle")
} else {
## if we get here, there are no free objects
## and we must create a new one
object <- private$createObject()
}
private$cancelScheduledTask(object, "validateHandle")
## call onActivate, onValidate and change object status
object <- private$checkValid(object)
private$changeObjectStatus(object, "taken")
return(object)
},
## passivates the object and returns it back to the pool
## (sets up task to destroy the object if the number of
## total objects exceeds the minimum)
release = function(object) {
pool_metadata <- attr(object, "pool_metadata", exact = TRUE)
if (pool_metadata$state == "free") {
stop("This object was already returned to the pool.")
}
if (is.null(pool_metadata) || !pool_metadata$valid) {
stop("Invalid object.")
}
## immediately destroy object if pool has already been closed
if (!self$valid) {
private$changeObjectStatus(object, NULL)
return()
}
## passivate object (or if that fails, destroy it and throw)
tryCatch({
onPassivate(object)
}, error = function(e) {
private$changeObjectStatus(object, NULL)
stop("Object could not be returned back to the pool. ",
"It was destroyed instead. Error message: ",
conditionMessage(e))
})
## set up a task to destroy the object after `idleTimeout`
## secs, if we're over the minimum number of objects
taskHandle <- scheduleTask(
function() {
if (self$counters$free + self$counters$taken > self$minSize) {
private$changeObjectStatus(object, NULL)
}
},
self$idleTimeout
)
pool_metadata$destroyHandle <- taskHandle
private$changeObjectStatus(object, "free")
## set up recurring validation every `validationInterval` secs
## so we can catch if an idle connection gets broken somehow
pool_metadata$validateHandle <- scheduleTaskRecurring(function() {
object <- private$checkValid(object)
## if we got here, the object was successfully
## activated and validated; now needs to be passivated
onPassivate(object)
}, self$validationInterval)
},
## cleaning up and closing the pool -- after the pool
## is closed, objects that were previously checked out
## can still be returned to the pool (which will
## immediately destroy them). Objects can no longer be
## checked out from the pool.
close = function() {
if (!self$valid) stop("The pool was already closed.")
self$valid <- FALSE
freeEnv <- private$freeObjects
freeObs <- ls(freeEnv)
## destroy all free objects
for (id in freeObs) {
private$changeObjectStatus(freeEnv[[id]], NULL)
}
# check if there are taken objects
if (self$counters$taken > 0) {
warning("You still have checked out objects. Return ",
"them to the pool so they can be destroyed. ",
"(If these are leaked objects - no reference ",
"- they will be destroyed the next time the ",
"garbage collector runs).", call. = FALSE)
}
}
),
private = list(
freeObjects = NULL,
factory = NULL,
idCounter = NULL,
## creates an object, assigns it to the
## free environment and returns it
createObject = function() {
if (self$counters$free + self$counters$taken >= self$maxSize) {
stop("Maximum number of objects in pool has been reached")
}
object <- private$factory()
if (is.null(object)) {
stop("Object creation was not successful. The `factory` ",
"argument must be a function that creates and ",
"returns the object to be pooled.")
}
## attach metadata about the object
pool_metadata <- new.env(parent = emptyenv())
attr(object, "pool_metadata") <- pool_metadata
id <- as.character(private$idCounter)
private$idCounter <- private$idCounter + 1
pool_metadata$id <- id
pool_metadata$pool <- self
pool_metadata$valid <- TRUE
pool_metadata$state <- NULL
pool_metadata$lastValidated <- NULL
## detect leaked connections and destroy them
reg.finalizer(pool_metadata, function(e) {
if (pool_metadata$valid) {
warning("You have a leaked pooled object.")
}
}, onexit = TRUE)
private$changeObjectStatus(object, "free")
return(object)
},
## tries to run onDestroy
destroyObject = function(object) {
tryCatch({
pool_metadata <- attr(object, "pool_metadata", exact = TRUE)
if (!pool_metadata$valid) {
warning("Object was destroyed twice.")
return()
}
pool_metadata$valid <- FALSE
private$cancelScheduledTask(object, "validateHandle")
private$cancelScheduledTask(object, "destroyHandle")
onDestroy(object)
}, error = function(e) {
warning("Object of class ", is(object)[1],
" could not be destroyed properly, ",
"but was successfully removed from pool. ",
"Error message: ", conditionMessage(e))
})
},
## change the objects's environment when a free object
## gets taken and vice versa. Valid values for `from`
## and `to` are: NULL, "free", "taken"
changeObjectStatus = function(object, to) {
pool_metadata <- attr(object, "pool_metadata", exact = TRUE)
id <- pool_metadata$id
from <- pool_metadata$state
# Remove from environment if necessary, and
# decrement counter
if (!is.null(from)) {
removeFrom <- switch(from,
free = private$freeObjects,
NULL
)
if (!is.null(removeFrom)) {
if (exists(id, envir = removeFrom)) {
rm(list = id, envir = removeFrom)
} else {
stop("The object could not be found.")
}
}
self$counters[[from]] <- self$counters[[from]] - 1
}
if (!is.null(to)) {
# Add to environment if necessary, and increment counter
addTo <- switch(to,
free = private$freeObjects,
NULL
)
if (!is.null(addTo)) {
assign(id, object, envir = addTo)
}
self$counters[[to]] <- self$counters[[to]] + 1
pool_metadata$state <- to
} else {
## if `to` == NULL, it means destroy the object
private$destroyObject(object)
}
},
cancelScheduledTask = function(object, task) {
pool_metadata <- attr(object, "pool_metadata", exact = TRUE)
taskHandle <- pool_metadata[[task]]
if (!is.null(taskHandle)) {
pool_metadata[[task]] <- NULL
taskHandle()   ## cancel the previous task
}
},
## try to validate + activate an object; if that fails,
## destroy the object and run whatever more cleanup is
## necessary (provided through `errorFun`)
checkValidTemplate = function(object, errorFun) {
tryCatch({
onActivate(object)
private$validate(object)
return(object)
}, error = function(e) {
private$changeObjectStatus(object, NULL)
errorFun(e)
})
},
## tries to validate + activate the object; if that fails,
## the first time around, warn, destroy that object and try
## again with a new object; **returns** the object
## if both tries fail, throw an error
checkValid = function(object) {
object <- private$checkValidTemplate(object,
function(e) {
warning("It wasn't possible to activate and/or validate ",
"the object. Trying again with a new object.",
call. = FALSE)
private$checkValidTemplate(private$createObject(),
function(e) {
stop("Object does not appear to be valid. ",
"Error message: ", conditionMessage(e),
call. = FALSE)
})
})
return(object)
},
## run onValidate on the object only if over `validationInterval`
## secs have passed since the last validation (this allows
## us some performance gains)
validate = function(object) {
pool_metadata <- attr(object, "pool_metadata", exact = TRUE)
lastValidated <- pool_metadata$lastValidated
## if the object has never been validated, set `lastValidated`
## to guarantee that it will be validated now
if (is.null(lastValidated)) {
lastValidated <- Sys.time() - self$validationInterval
}
interval <- difftime(Sys.time(), lastValidated, units = "secs")
if (interval >= self$validationInterval) {
onValidate(object)
pool_metadata$lastValidated <- Sys.time()
}
}
)
)
combine = pool(fit)
library(pool)
combine = pool(fit)
install.packages("DBI")
devtools::install_github("rstudio/pool")
library(pool)
combine = pool(fit)
combine = Pool(fit)
library(Pool)
combine = poolReturn(fit)
pool()
combine = poolCreate(fit)
data("pool")
#Model prediksi
fit = with (data = mar, exp = lm(tariff ~ intresmi + signed))
library(hms)
library(pool)
combine = pool(fit)
install.packages("poolVIM")
update(pool)
#imputasi dengan Amelia
library(VIM)
#imputasi dengan Amelia
library(Amelia)
missmap(freetrade)
summary(freetrade)
?parallel
library(ggplot2)
library(lattice)
amelia_fit = amelia(freetrade, m=5, parallelplo
= list(x = list(rot = 90)))
amelia_fit = amelia(freetrade, m=5, parallel = "multicore", noms = "country")
amelia_fit$imputations$tariff
amelia_fit$imputations[[1]]
amelia_fit$imputations[[2]]
amelia_fit$imputations[[3]]
amelia_fit$imputations[[4]]
amelia_fit$imputations[[5]]
amelia_fit$imputations$tariff
amelia_fit$imputations$intresmi
amelia_fit$imputations$signed
data("freetrade", package = "Amelia")
View(freetrade)
str(freetrade)
pct_miss(freetrade)
library(Amelia)
library(datasets)
library(naniar)
pct_miss(freetrade)
n_complete(freetrade)
summary(freetrade)
library(missForest)
mar = prodNA(freetrade, noNA = 0.1)
summary(mar)
mar = subset(freetrade, select = -c(country))
summary(mar)
#imputasi dengan MICE
library(mice)
md.pattern(mar)
md.pairs(mar)
View(freetrade)
library(VIM)
plotting = aggr(mar, col=c('skyblue','red', 'orange'), numbers=TRUE, sortVars
= TRUE, labels=names(mar), cex.lab = 1.2, cex.axis=.6, gap=1,
ylab=c("Data Hilang","Pola Data"))
vis_miss(freetrade, sort_miss = TRUE)
imputed_Data = mice(mar, m=3, maxit = 50, method = 'cart', seed = 500)
summary(imputed_Data)
mice(data=mar, m=5, method = 'cart', maxit = 50, seed = 500)
imputed_Data$imp$tariff
imputed_Data$imp$polity
imputed_Data$imp$intresmi
imputed_Data$imp$signed
imputed_Data$imp$fiveop
data.lengkap = complete(imputed_Data,2)
View(data.lengkap)
#Model prediksi
fit = with (data = mar, exp = lm(tariff ~ polity + intresmi + signed + fiveop))
library(hms)
library(pool)
combine = pool(fit)
summary(combine)
help("Deprecated")
library(hms)
pool()
hms()
install.packages("DBI")
devtools::install_github("rstudio/pool")
library(pool)
combine = pool(fit)
impute = mice(mar[,1:12], m = 3, seed = 123)
impute = mice(mar[,1:10], m = 5, seed = 123)
freetrade2 = amelia(freetrade, m=3, idvars = "freetrade_")
?amelia
amelia_fit = amelia(freetrade, m=5, parallel = "snow", noms = "country")
amelia_fit$imputations[[1]]
amelia_fit$imputations[[1]]
amelia_fit$imputations[[2]]
amelia_fit$imputations[[3]]
amelia_fit$imputations[[4]]
amelia_fit$imputations[[5]]
amelia_fit$imputations[[3]]$tariff
amelia_fit$imputations$intresmi
amelia_fit$imputations$signed
write.amelia(amelia_fit, file.stem = "imputed_data_set")
